from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
import random, math, sys

window_width, window_height = 800, 600
map_bound = 40
player_pos = [0, 0, 0]
player_angle = 0
player_turret_angle = 0
player_health = 100
player_lives = 5
player_bullets, enemy_bullets, obstacles, powerups, effects = [], [], [], [], []
enemy_tanks = []
fighter_plane = {'x': -50, 'y': 50, 'z': 0, 'dir': 1, 'target': None, 'projectile': None}
current_camera = 'third_person'
game_state = 'menu'
is_paused = False


class Bullet:
    def __init__(self, x, z, angle, owner):
        self.x, self.z = x, z
        self.angle = angle
        self.owner = owner
        self.speed = 0.5

    def move(self):
        self.x += self.speed * math.sin(math.radians(self.angle))
        self.z += self.speed * math.cos(math.radians(self.angle))

class EnemyTank:
    def __init__(self):
        self.x = random.uniform(-map_bound + 5, map_bound - 5)
        self.z = random.uniform(-map_bound + 5, map_bound - 5)
        self.health = 100
        self.cooldown = 0
        self.angle = random.uniform(0, 360)
        self.speed = 0.05

    def move(self):
        dx = player_pos[0] - self.x
        dz = player_pos[2] - self.z
        dist = math.hypot(dx, dz)
        if dist < 10:
            self.angle = math.degrees(math.atan2(dx, dz))
        else:
            if random.random() < 0.02:
                self.angle += random.uniform(-30, 30)
        nx = self.x + self.speed * math.sin(math.radians(self.angle))
        nz = self.z + self.speed * math.cos(math.radians(self.angle))
        if is_inside_bounds(nx, nz) and not is_obstacle(nx, nz):
            if math.hypot(nx - player_pos[0], nz - player_pos[2]) > 2:
                self.x, self.z = nx, nz

class PowerUp:
    def __init__(self):
        self.x = random.uniform(-map_bound + 3, map_bound - 3)
        self.z = random.uniform(-map_bound + 3, map_bound - 3)
        self.type = random.choice(['health', 'speed', 'rapid'])

class FlashEffect:
    def __init__(self, x, z, duration=10):
        self.x, self.z = x, z
        self.timer = duration

def init_game():
    global player_pos, player_angle, player_health, player_lives
    player_pos[:] = [0, 0, 0]
    player_angle = 0
    player_health = 100
    player_lives = 5
    player_bullets.clear()
    enemy_bullets.clear()
    effects.clear()
    enemy_tanks.clear()
    for _ in range(10):
        enemy_tanks.append(EnemyTank())
    obstacles[:] = [(random.uniform(-map_bound+3, map_bound-3), random.uniform(-map_bound+3, map_bound-3)) for _ in range(20)]
    powerups[:] = [PowerUp() for _ in range(3)]

def init_opengl():
    glClearColor(0.5, 0.8, 0.5, 1)
    glEnable(GL_DEPTH_TEST)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(60, window_width / window_height, 1, 200)

# ========== HELPERS ==========
def is_inside_bounds(x, z):
    return -map_bound + 1 < x < map_bound - 1 and -map_bound + 1 < z < map_bound - 1

def is_obstacle(x, z):
    for ox, oz in obstacles:
        if math.hypot(x - ox, z - oz) < 2:
            return True
    return False

def find_closest_enemy():
    closest_enemy = None
    min_distance = float('inf')
    for e in enemy_tanks:
        if e.health > 0:
            dist = math.hypot(player_pos[0] - e.x, player_pos[2] - e.z)
            if dist < min_distance:
                min_distance = dist
                closest_enemy = e
    return closest_enemy

# ========== CAMERA ==========
def set_camera():
    glLoadIdentity()
    if current_camera == 'third_person':
        gluLookAt(player_pos[0] - 10 * math.sin(math.radians(player_angle)), 8,
                  player_pos[2] - 10 * math.cos(math.radians(player_angle)),
                  player_pos[0], 0, player_pos[2], 0, 1, 0)
    elif current_camera == 'first_person':
        gluLookAt(player_pos[0], 2, player_pos[2],
                  player_pos[0] + 10 * math.sin(math.radians(player_turret_angle)), 2,
                  player_pos[2] + 10 * math.cos(math.radians(player_turret_angle)), 0, 1, 0)
    elif current_camera == 'top_down':
        gluLookAt(0, 60, 0, 0, 0, 0, 0, 0, -1)

# ========== DRAW ==========
def draw_text(x, y, text):
    glWindowPos2f(x, y)
    for ch in text.encode():
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ch)

def draw_scene():
    draw_boundary()
    draw_tank(player_pos[0], player_pos[2], player_angle, is_player=True)
    for e in enemy_tanks:
        if e.health > 0:
            draw_tank(e.x, e.z, e.angle)
    draw_obstacles()
    draw_powerups()
    draw_bullets()
    draw_plane()
    draw_effects()
    draw_scoreboard()

def draw_boundary():
    glColor3f(0, 0, 0)
    glBegin(GL_LINE_LOOP)
    glVertex3f(-map_bound, 0.1, -map_bound)
    glVertex3f(map_bound, 0.1, -map_bound)
    glVertex3f(map_bound, 0.1, map_bound)
    glVertex3f(-map_bound, 0.1, map_bound)
    glEnd()

def draw_tank(x, z, angle, is_player=False):
    glPushMatrix()
    glTranslatef(x, 1, z)
    glRotatef(angle, 0, 1, 0)
    glColor3f(0, 0, 1) if is_player else glColor3f(1, 0, 0)
    glutSolidCube(2)
    glPushMatrix()
    if is_player:
        glRotatef(player_turret_angle - angle, 0, 1, 0)
    glTranslatef(0, 1, 1.2)
    glScalef(0.3, 0.3, 2)
    glutSolidCube(1)
    glPopMatrix()
    glPopMatrix()

def draw_obstacles():
    for x, z in obstacles:
        glColor3f(0.4, 0.3, 0.1)
        glPushMatrix()
        glTranslatef(x, 0, z)
        glRotatef(-90, 1, 0, 0)
        glutSolidCylinder(0.4, 1.5, 8, 8)
        glPopMatrix()
        glColor3f(0.1, 0.6, 0.1)
        glPushMatrix()
        glTranslatef(x, 1.5, z)
        glutSolidSphere(1, 8, 8)
        glPopMatrix()

def draw_powerups():
    for p in powerups:
        glColor3f(*(0, 1, 0) if p.type == 'health' else (0, 1, 1) if p.type == 'speed' else (1, 0, 1))
        glPushMatrix()
        glTranslatef(p.x, 0.3, p.z)
        glutSolidCube(1)
        glPopMatrix()

def draw_bullets():
    glColor3f(1, 1, 0)
    for b in player_bullets + enemy_bullets:
        glPushMatrix()
        glTranslatef(b.x, 0.3, b.z)
        glutSolidSphere(0.2, 8, 8)
        glPopMatrix()

def draw_effects():
    glColor3f(1, 0.5, 0)
    for eff in effects:
        glPushMatrix()
        glTranslatef(eff.x, 1, eff.z)
        glutSolidSphere(0.8, 10, 10)
        glPopMatrix()

def draw_scoreboard():
    glColor3f(0, 0, 0)
    draw_text(10, window_height - 20, f"Lives: {player_lives}")
    alive_enemies = len([e for e in enemy_tanks if e.health > 0])
    draw_text(10, window_height - 40, f"Enemies Remaining: {alive_enemies}")

def draw_plane():
    glColor3f(0.5, 0.5, 0.5)
    glPushMatrix()
    glTranslatef(fighter_plane['x'], fighter_plane['y'], fighter_plane['z'])
    glScalef(4, 0.5, 2)
    glutSolidCube(1)
    glPopMatrix()

def display():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    set_camera()

    if game_state == 'menu':
        glColor3f(0, 0, 0)
        draw_text(300, 300, "Press S to Start, Q to Quit")
    elif game_state == 'paused':
        draw_scene()
        draw_text(330, 300, "PAUSED - Press P to Resume")
    elif game_state == 'playing':
        draw_scene()
    elif game_state == 'gameover':
        draw_scene()
        if len([e for e in enemy_tanks if e.health > 0]) == 0:
            draw_text(320, 300, "You Won! Press S to Restart or Q to Quit")
        else:
            draw_text(320, 300, "Game Over! Press S to Restart or Q to Quit")

    glutSwapBuffers()


def update(value):
    global game_state
    if game_state != 'playing':
        glutTimerFunc(16, update, 0)
        return

    # Check if all enemy tanks are defeated
    alive_enemies = len([e for e in enemy_tanks if e.health > 0])
    if alive_enemies == 0:
        game_state = 'gameover'
        effects.append(FlashEffect(0, 0, duration=50))  # Optional: add a flashing effect when winning
        glutPostRedisplay()
        return


    for b in player_bullets[:]:
        b.move()
        for e in enemy_tanks:
            if e.health > 0 and math.hypot(b.x - e.x, b.z - e.z) < 2:
                e.health -= 50
                player_bullets.remove(b)
                effects.append(FlashEffect(b.x, b.z))
                break


    for b in enemy_bullets[:]:
        b.move()
        if math.hypot(b.x - player_pos[0], b.z - player_pos[2]) < 2:
            global player_health, player_lives
            player_health -= 10
            enemy_bullets.remove(b)
            effects.append(FlashEffect(b.x, b.z))
            if player_health <= 0:
                player_lives -= 1
                player_health = 100
                if player_lives <= 0:
                    game_state = 'gameover'

    # Move enemy tanks
    for e in enemy_tanks:
        if e.health > 0:
            e.move()
            if math.hypot(player_pos[0] - e.x, player_pos[2] - e.z) < 15 and e.cooldown == 0:
                angle = math.degrees(math.atan2(player_pos[0] - e.x, player_pos[2] - e.z))
                enemy_bullets.append(Bullet(e.x, e.z, angle, 'enemy'))
                e.cooldown = 60
            e.cooldown = max(0, e.cooldown - 1)


    fighter_plane['x'] += 0.1 * fighter_plane['dir']
    if abs(fighter_plane['x']) > 50:
        fighter_plane['dir'] *= -1


    if fighter_plane['target']:
        target = fighter_plane['target']
        angle = math.degrees(math.atan2(target.x - fighter_plane['x'], target.z - fighter_plane['z']))
        if fighter_plane['projectile'] is None:
            fighter_plane['projectile'] = Bullet(fighter_plane['x'], fighter_plane['z'], angle, 'plane')


    for eff in effects[:]:
        eff.timer -= 1
        if eff.timer <= 0:
            effects.remove(eff)

    glutPostRedisplay()
    glutTimerFunc(16, update, 0)

# ========== INPUT ==========
def keyboard(key, x, y):
    global player_angle, player_pos, player_turret_angle, player_bullets, current_camera, game_state, fighter_plane
    key = key.decode('utf-8')
    step = 0.5
    if game_state == 'menu' and key == 's':
        init_game()
        game_state = 'playing'
    elif game_state in ['menu', 'gameover'] and key == 'q':
        glutLeaveMainLoop()
    elif game_state == 'paused' and key == 'p':
        game_state = 'playing'
    elif game_state == 'playing':
        if key == 'a': player_angle -= 5
        elif key == 'd': player_angle += 5
        elif key == 'w':
            nx = player_pos[0] + step * math.sin(math.radians(player_angle))
            nz = player_pos[2] + step * math.cos(math.radians(player_angle))
            if is_inside_bounds(nx, nz) and not is_obstacle(nx, nz):
                player_pos[0], player_pos[2] = nx, nz
        elif key == 's':
            nx = player_pos[0] - step * math.sin(math.radians(player_angle))
            nz = player_pos[2] - step * math.cos(math.radians(player_angle))
            if is_inside_bounds(nx, nz) and not is_obstacle(nx, nz):
                player_pos[0], player_pos[2] = nx, nz
        elif key == ' ':
            bx = player_pos[0] + 2 * math.sin(math.radians(player_turret_angle))
            bz = player_pos[2] + 2 * math.cos(math.radians(player_turret_angle))
            player_bullets.append(Bullet(bx, bz, player_turret_angle, 'player'))
        elif key == 'c':
            cams = ['third_person', 'first_person', 'top_down']
            current_camera = cams[(cams.index(current_camera)+1)%3]
        elif key == 'p':
            game_state = 'paused'
        elif key == 'f':  # Fire plane's projectile
            fighter_plane['target'] = find_closest_enemy()

def special_keys(key, x, y):
    global player_turret_angle
    if game_state == 'playing':
        if key == GLUT_KEY_LEFT:
            player_turret_angle -= 5
        elif key == GLUT_KEY_RIGHT:
            player_turret_angle += 5

# ========== MAIN ==========
def main():
    glutInit()
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
    glutInitWindowSize(window_width, window_height)
    glutCreateWindow(b"3D Tank Battle Arena")
    init_opengl()
    glutDisplayFunc(display)
    glutKeyboardFunc(keyboard)
    glutSpecialFunc(special_keys)
    glutTimerFunc(16, update, 0)
    glutMainLoop()

if __name__ == "__main__":
    main()
